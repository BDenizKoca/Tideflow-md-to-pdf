name: Release Build

on:
  push:
    tags:
      - 'v*' # Trigger on version tags like v1.0.0
  workflow_dispatch: # Allow manual trigger

jobs:
  release:
    permissions:
      contents: write
    env:
      TYPST_VERSION: 0.13.1
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # macOS (x64)
            args: '--target x86_64-apple-darwin'
            typst_dir: 'macos'
            typst_asset: 'typst-x86_64-apple-darwin.tar.xz'
            typst_sha256: '4dabfe647f7f01ed9cc13ad8196a6c7f5e16f0732821b522d50740d3a9f5207b'
          - platform: 'macos-latest' # macOS (ARM)
            args: '--target aarch64-apple-darwin'
            typst_dir: 'macos'
            typst_asset: 'typst-aarch64-apple-darwin.tar.xz'
            typst_sha256: '541e4f9eaca3f34ee865f81fc663e4839cb84d6253f71a372cd855b0a7283213'
          - platform: 'ubuntu-22.04' # Linux
            args: ''
            typst_dir: 'linux'
            typst_asset: 'typst-x86_64-unknown-linux-musl.tar.xz'
            typst_sha256: '7d214bfeffc2e585dc422d1a09d2b144969421281e8c7f5d784b65fc69b5673f'
          - platform: 'windows-latest' # Windows
            args: ''
            typst_dir: ''
            typst_asset: ''
            typst_sha256: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # For macOS cross-compilation
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Install frontend dependencies
        run: npm ci

      - name: Download Typst binary
        if: matrix.typst_dir != ''
        shell: bash
        run: |
          set -euo pipefail
          DEST="src-tauri/bin/typst/${{ matrix.typst_dir }}"
          TMP="$(mktemp -d)"
          ARCHIVE="$TMP/typst.tar.xz"
          mkdir -p "$DEST"
          curl -fsSL -o "$ARCHIVE" "https://github.com/typst/typst/releases/download/v${TYPST_VERSION}/${{ matrix.typst_asset }}"

          EXPECTED="$(echo "${{ matrix.typst_sha256 }}" | tr '[:upper:]' '[:lower:]')"
          if [ -z "$EXPECTED" ]; then
            echo "Missing expected SHA256 for ${{ matrix.typst_asset }}" >&2
            exit 1
          fi
          if command -v sha256sum >/dev/null 2>&1; then
            ACTUAL="$(sha256sum "$ARCHIVE" | awk '{print $1}' | tr '[:upper:]' '[:lower:]')"
          else
            ACTUAL="$(shasum -a 256 "$ARCHIVE" | awk '{print $1}' | tr '[:upper:]' '[:lower:]')"
          fi
          if [ "$ACTUAL" != "$EXPECTED" ]; then
            echo "SHA256 mismatch for ${{ matrix.typst_asset }}" >&2
            echo "Expected: $EXPECTED" >&2
            echo "Actual:   $ACTUAL" >&2
            exit 1
          fi

          tar -xJf "$ARCHIVE" -C "$TMP"
          SRC_DIR="$(find "$TMP" -maxdepth 1 -type d -name 'typst*' -print -quit)"
          if [ -z "$SRC_DIR" ]; then
            echo "Failed to locate extracted Typst directory" >&2
            exit 1
          fi
          rm -rf "$DEST"
          mkdir -p "$DEST"
          cp -a "$SRC_DIR"/. "$DEST"/
          chmod +x "$DEST/typst"

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ github.ref_name }} # Use the tag name as release name
          releaseName: 'Tideflow ${{ github.ref_name }}'
          releaseDraft: true
          prerelease: false
          includeRelease: true
          includeUpdaterJson: false
          args: ${{ matrix.args }}

      - name: List produced bundles (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          echo "Listing src-tauri/target/release/bundle"
          ls -la src-tauri/target/release/bundle || true

      - name: List produced bundles (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "Listing src-tauri/target/release/bundle"
          Get-ChildItem -Path src-tauri\target\release\bundle -Force -ErrorAction SilentlyContinue | Format-List || true
